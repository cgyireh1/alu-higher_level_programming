============================
doctest for 0-add_integer.py
============================
''add_integer()'' returns the sum of its arguments

SUCCESSFUL TEST CONDITIONS
==========================

testing addition of two integers, both single digit
::
>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer(4, 5)
9

testing addition of two integers, both multiple digits
::
>>> add_integer(10000, 78000)
88000

testing addition of two negative integers
::
>>> add_integer(-9, -1)
-10

testing addition of one positive, one negative integers
::
>>> add_integer(-3, 7)
4

testing addition of 1 integer and default value of 2nd int (98)
::
>>> add_integer(7)
105

testing addition of two floats
::
>>> add_integer(3.55, 2.25)
5

testing addition of 1 int, 1 float
::
>>> add_integer(7, 1.842)
8

testing addition of 1 float and default value of 2nd int (98)
::
>>> add_integer(2.1254)
100

testing addition of large integer (2**32) and int
::
>>> add_integer(465000, 5)
465005

testing addition of two large integers (2**32)
::
>>> add_integer(4253684928, 2437325921)
6691010849

TEST CONDITIONS WHERE AN ERROR IS RAISED
========================================

testing addition of single infinity and default value of 2nd int (98)
::
>>> add_integer(float('inf'))
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer

testing how add_integer function handles no arguments
::
>>> add_integer()
Traceback (most recent call last):
TypeError: add_integer() missing 1 required positional argument: 'a'

testing how add_integer function handles None argument
::
>>> add_integer(None)
Traceback (most recent call last):
TypeError: a must be an integer

testing how add_integer function handles more than 2 arguments
::
>>> add_integer(1, 2, 3)
Traceback (most recent call last):
TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

testing how add_integer function handles 1st argument not of type int or float
::
>>> add_integer("9", 1)
Traceback (most recent call last):
TypeError: a must be an integer

testing how add_integer function handles 2nd argument not of type int or float
::
>>> add_integer(7, "8")
Traceback (most recent call last):
TypeError: b must be an integer

testing how add_integer function handles both arguments not of type int or float
::
>>> add_integer("5", "3")
Traceback (most recent call last):
TypeError: a must be an integer

testing how add_integer function handles if 1 argument is boolean
::
>>> add_integer(True, 1)
Traceback (most recent call last):
TypeError: a must be an integer

testing how add_integer function handles if 1 argument is list
::
>>> add_integer([6], 1)
Traceback (most recent call last):
TypeError: a must be an integer

testing how add_integer function handles float NaN argument
::
>>> add_integer(float("NaN"), 1)
Traceback (most recent call last):
ValueError: cannot convert float NaN to integer
